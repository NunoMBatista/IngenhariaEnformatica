1.----------------------------------------------------------------

11:		void add_pessoa (int pos, char * nome, struct data d, struct pessoa * pessoas []) {
12:			pessoas[pos].nome = (char*)malloc(sizeof(char));
13:			pessoas[pos].nome = nome;
14:			pessoas[pos].data_nasc = (struct data *)malloc (sizeof (struct data));
15:			pessoas[pos].data_nasc = d;
16:		}
17:		int main (){
18:			struct data dt; char nome [50]; int qt;
19:			printf ("Quantas pessoas pretende registar: "); scanf (" %d", &qt);
20:			struct pessoa *pessoas = (struct pessoa *)malloc((qt)*sizeof(struct pessoa));
21:			for (int i=0; i<qt; i++){
22:				printf ("Nome data de nascimento (nome dia/mes/ano): ");
23:				scanf (" %s %d/ %d/ %d", nome, &dt.dia, &dt.mes, &dt.ano);
24:				add_pessoa (i, nome, dt, pessoas);
25:			}
26:			/* TODO fazer o resto do programa */
27:			return 0;
28:		}


ERROS:
ll10: para receber o array de pessoas, basta receber "[...] struct pessoa pessoas[]) {"
ll12: a menos que queriamos que o nome tenha apenas um caracter, temos q alocar espaço para mais caracteres. Como os nomes no main têm 50 caracteres, deveriamos fazer "(char *)malloc(50*sizeof(char));"
ll13: não é assim que se atribui valores a strings (array char), devia ser "strcpy(pessoas[pos].nome, nome);" ou copiar caracter a caracter com "for (int i=0; nome[i]!='\0'; i++) { pessoas[pos].nome[i]=nome[i] }"
ll15: Não é possivel dar assign com apenas um igual, nem mesmo fazendo "pessoas[pos].data_nasc = &d", dado que isto meramente faz com que o atributo "data_nasc" aponte para a struct "d", que é local apenas a esta função, logo quando a função terminar, e a sua stack colapsar, n há garantia de que a informação referenciada (d) não seja alterada. como tal deve-se fazer uma cópia verdadeira da informação na struct data de "d" para "pessoas[pos].data_nasc", que foi malloc'ed na linha anterior, com "memcpy(pessoas[pos].data_nasc, &d, sizeof(struct data));"


(Para mais informações, consultar "Kiko_ProvaEx1.c)





2.----------------------------------------------------------------

#include <stdio.h>
#include <string.h>

typedef struct aluno {
	char nome [50];
	int numero;
	char disciplinas[5][10];
} aluno;

void alteraDisciplina (FILE * f, char *d, int i, int n){
	aluno a;
	fseek(f, sizeof(aluno)*i, SEEK_SET);
	fread (a, sizeof (struct aluno), 1, f);
	fseek(f, sizeof(aluno)*i, SEEK_SET);
	strcpy(a.disciplinas[3], d);
	fwrite(&a, sizeof(struct aluno), 1, f);
}

int main(){
	FILE * f = fopen("dados.bin", "r+");
	if (f!=NULL){
		alteraDisciplina (f, "novoNome", 3, 2); // alterou a disciplina 3 do aluno 2
		fflush(f);
	}
	return 0;
}





3.----------------------------------------------------------------

void string_to_stack(type_stack **s, char *str){
    for(int i = 0; str[i] != '\0'; i++){
        push(s, str[i]);
    }
}

void string_operations(type_stack **s, int *ops, size_t size_ops) {
    /* 0: print, 1: addicionar char, 2: pop*/
    for(int o=0; o<(int)size_ops; o++){
        switch(ops[o]){
            case 0:
                printf("Current string: ");
                // create temp stack
                type_stack *temp = NULL;
                // copy stack to temp and print
                while (!is_empty(s)) {
                    char c = pop(s);
                    push(&temp, c);
                    printf("%c", c);
                }
                // copy temp back to stack
                while (!is_empty(&temp)) {
                    push(s, pop(&temp));
                }
                printf("\n");
                break;
            case 1:
                printf("Added: ");
                char c;
                scanf(" %c", &c);       // n vou usar get_char pq é uma má função
                push(s, c);
                break;
            case 2:
                printf("Removed: %c\n", pop(s));
                break;
        }
    }
}





4.----------------------------------------------------------------

FAÇO DEPOIS (se alguem quiser fazer adicione aqui e faça pull request)
